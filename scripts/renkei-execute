#!/usr/bin/env node

/**
 * Renkei System - タスク実行コマンド
 * tmuxセッション内でタスクを実行し、outputペインに結果を表示
 */

const path = require('path');
const { execSync } = require('child_process');

// 簡易的な色付け
const chalk = {
  blue: (text) => `\x1b[34m${text}\x1b[0m`,
  green: (text) => `\x1b[32m${text}\x1b[0m`,
  yellow: (text) => `\x1b[33m${text}\x1b[0m`,
  red: (text) => `\x1b[31m${text}\x1b[0m`,
  gray: (text) => `\x1b[90m${text}\x1b[0m`,
  cyan: (text) => `\x1b[36m${text}\x1b[0m`
};

// Bold versions
chalk.blue.bold = (text) => `\x1b[1m\x1b[34m${text}\x1b[0m`;
chalk.green.bold = (text) => `\x1b[1m\x1b[32m${text}\x1b[0m`;
chalk.red.bold = (text) => `\x1b[1m\x1b[31m${text}\x1b[0m`;

// タスク説明を取得
function getTaskDescription() {
  const args = process.argv.slice(2);
  if (args.length === 0) {
    console.error(chalk.red('❌ タスクの説明を指定してください'));
    console.log('使用方法: scripts/renkei-execute "タスクの説明"');
    process.exit(1);
  }
  return args.join(' ');
}

// outputペインをクリア
function clearOutputPane() {
  try {
    // outputペインのIDを取得
    const panes = execSync('tmux list-panes -t renkei -F "#{pane_id}:#{pane_title}"', { encoding: 'utf8' });
    const outputPaneId = panes.split('\n')
      .map(line => line.split(':'))
      .find(([_, title]) => title && title.includes('Output'))?.[0];
    
    if (outputPaneId) {
      // ペインをクリア
      execSync(`tmux send-keys -t ${outputPaneId} C-l`);
    }
  } catch (error) {
    // エラーは無視（tmuxセッションがない場合など）
  }
}

// outputペインに出力
function sendToOutputPane(message) {
  try {
    // outputペインのIDを取得
    const panes = execSync('tmux list-panes -t renkei -F "#{pane_id}:#{pane_title}"', { encoding: 'utf8' });
    const outputPaneId = panes.split('\n')
      .map(line => line.split(':'))
      .find(([_, title]) => title && title.includes('Output'))?.[0];
    
    if (outputPaneId) {
      // メッセージの各行を送信
      const lines = message.split('\n');
      for (const line of lines) {
        if (line.trim()) {
          execSync(`tmux send-keys -t ${outputPaneId} "${line.replace(/"/g, '\\"')}" Enter`);
        } else {
          execSync(`tmux send-keys -t ${outputPaneId} Enter`);
        }
      }
    } else {
      console.log(message);
    }
  } catch (error) {
    // tmuxが使えない場合は標準出力に
    console.log(message);
  }
}

// メイン処理
async function main() {
  const taskDescription = getTaskDescription();
  
  console.log(chalk.blue.bold('🤖 Renkei System - タスク実行'));
  console.log(chalk.gray(`タスク: ${taskDescription}`));
  
  try {
    // tmuxセッションの確認
    try {
      execSync('tmux has-session -t renkei', { stdio: 'pipe' });
    } catch {
      console.error(chalk.red('❌ Renkeiセッションが起動していません'));
      console.log(chalk.yellow('先に ./scripts/renkei-start を実行してください'));
      process.exit(1);
    }
    
    // outputペインをクリア
    clearOutputPane();
    
    // outputペインにヘッダーを表示
    sendToOutputPane(`${chalk.cyan('━'.repeat(60))}`);
    sendToOutputPane(`${chalk.cyan.bold('🤖 Renkei Task Execution')}`);
    sendToOutputPane(`${chalk.cyan('━'.repeat(60))}`);
    sendToOutputPane(``);
    sendToOutputPane(`📝 タスク: ${taskDescription}`);
    sendToOutputPane(`🕐 開始時刻: ${new Date().toLocaleString('ja-JP')}`);
    sendToOutputPane(``);
    sendToOutputPane(`${chalk.yellow('⏳ タスクを処理中...')}`);
    sendToOutputPane(``);
    
    // Node.jsスクリプトとして実行
    const scriptPath = path.join(__dirname, 'renkei-worker.js');
    const result = execSync(`node "${scriptPath}" "${taskDescription}"`, {
      encoding: 'utf8',
      cwd: process.cwd(),
      env: { ...process.env, RENKEI_TMUX_OUTPUT: '1' }
    });
    
    // 結果を表示
    sendToOutputPane(``);
    sendToOutputPane(`${chalk.green('✅ タスク完了')}`);
    sendToOutputPane(`🕐 終了時刻: ${new Date().toLocaleString('ja-JP')}`);
    sendToOutputPane(`${chalk.cyan('━'.repeat(60))}`);
    
    console.log(chalk.green.bold('✅ タスクが完了しました'));
    
  } catch (error) {
    sendToOutputPane(``);
    sendToOutputPane(`${chalk.red('❌ エラーが発生しました')}`);
    sendToOutputPane(`${error.message}`);
    sendToOutputPane(`${chalk.cyan('━'.repeat(60))}`);
    
    console.error(chalk.red.bold('❌ タスク実行エラー:'), error.message);
    process.exit(1);
  }
}

// 実行
main();